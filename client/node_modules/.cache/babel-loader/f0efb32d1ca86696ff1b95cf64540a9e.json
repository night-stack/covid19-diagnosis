{"ast":null,"code":"import moment from 'moment';\nimport 'moment/locale/id';\nmoment.locale('id');\nconst monthSelect = [{\n  label: 'January',\n  value: 1\n}, {\n  label: 'February',\n  value: 2\n}, {\n  label: 'March',\n  value: 3\n}, {\n  label: 'April',\n  value: 4\n}, {\n  label: 'May',\n  value: 5\n}, {\n  label: 'June',\n  value: 6\n}, {\n  label: 'July',\n  value: 7\n}, {\n  label: 'August',\n  value: 8\n}, {\n  label: 'September',\n  value: 9\n}, {\n  label: 'October',\n  value: 10\n}, {\n  label: 'November',\n  value: 11\n}, {\n  label: 'December',\n  value: 12\n}];\nexport const getCurrentTime = () => Math.floor(Date.now() / 1000);\nexport const getCurrentTimeMs = () => Date.now();\nexport const getTimestampName = () => Date.now() + Math.floor(Math.random() * 9);\nexport const getUTCNow = () => moment().utc();\nexport const getUTCDateTime = arrDate => moment.utc(arrDate).format();\nexport const getFormatedDate = (dateValue, stringFormat) => moment(dateValue).format(stringFormat);\nexport const isBeforeNow = dateValue => {\n  const now = getUTCNow();\n  return moment(dateValue).isBefore(now);\n};\nexport const getCurrentMonth = () => moment().month() + 1;\nexport const getCurrentYear = () => moment().year();\nexport const getMonthSelectOption = () => monthSelect;\nexport const getYearSelectOption = start => {\n  const options = [];\n  const currentYear = moment().year();\n\n  for (let index = start; index <= currentYear; index += 1) {\n    options.push({\n      label: index,\n      value: index\n    });\n  }\n\n  return options;\n};\nexport const setToTime = (dateValue, h = 0, m = 0, s = 0) => {\n  const newDate = moment(dateValue).hours(h).minutes(m).seconds(s);\n  return newDate;\n};","map":{"version":3,"sources":["/home/agung/Projects/joki/covid19-diagnosis/src/helpers/dateTime.js"],"names":["moment","locale","monthSelect","label","value","getCurrentTime","Math","floor","Date","now","getCurrentTimeMs","getTimestampName","random","getUTCNow","utc","getUTCDateTime","arrDate","format","getFormatedDate","dateValue","stringFormat","isBeforeNow","isBefore","getCurrentMonth","month","getCurrentYear","year","getMonthSelectOption","getYearSelectOption","start","options","currentYear","index","push","setToTime","h","m","s","newDate","hours","minutes","seconds"],"mappings":"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","sourcesContent":["import moment from 'moment';\nimport 'moment/locale/id';\n\nmoment.locale('id');\n\nconst monthSelect = [\n  { label: 'January', value: 1 },\n  { label: 'February', value: 2 },\n  { label: 'March', value: 3 },\n  { label: 'April', value: 4 },\n  { label: 'May', value: 5 },\n  { label: 'June', value: 6 },\n  { label: 'July', value: 7 },\n  { label: 'August', value: 8 },\n  { label: 'September', value: 9 },\n  { label: 'October', value: 10 },\n  { label: 'November', value: 11 },\n  { label: 'December', value: 12 },\n];\n\nexport const getCurrentTime = () => Math.floor(Date.now() / 1000);\nexport const getCurrentTimeMs = () => Date.now();\nexport const getTimestampName = () => Date.now() + Math.floor(Math.random() * 9);\nexport const getUTCNow = () => moment().utc();\nexport const getUTCDateTime = (arrDate) => moment.utc(arrDate).format();\nexport const getFormatedDate = (dateValue, stringFormat) => moment(dateValue).format(stringFormat);\nexport const isBeforeNow = (dateValue) => {\n  const now = getUTCNow();\n\n  return moment(dateValue).isBefore(now);\n};\nexport const getCurrentMonth = () => moment().month() + 1;\nexport const getCurrentYear = () => moment().year();\nexport const getMonthSelectOption = () => monthSelect;\nexport const getYearSelectOption = (start) => {\n  const options = [];\n  const currentYear = moment().year();\n  for (let index = start; index <= currentYear; index += 1) {\n    options.push({ label: index, value: index });\n  }\n\n  return options;\n};\nexport const setToTime = (dateValue, h = 0, m = 0, s = 0) => {\n  const newDate = moment(dateValue).hours(h).minutes(m).seconds(s);\n\n  return newDate;\n};\n"]},"metadata":{},"sourceType":"module"}