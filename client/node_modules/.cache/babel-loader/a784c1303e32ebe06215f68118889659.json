{"ast":null,"code":"var _jsxFileName = \"/home/agung/Projects/joki/covid19-diagnosis/src/helpers/string.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst phoneRegex = /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;\nconst emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\nexport const slugify = string => {\n  const a = 'àáäâãåèéëêìíïîòóöôùúüûñçßÿœæŕśńṕẃǵǹḿǘẍźḧ·/_,:;';\n  const b = 'aaaaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh------';\n  const p = new RegExp(a.split('').join('|'), 'g');\n  return string.toString().trim().toLowerCase().replace(/\\s+/g, '-') // Replace spaces with\n  .replace(p, c => b.charAt(a.indexOf(c))) // Replace special characters\n  .replace(/&/g, '-and-') // Replace & with ‘and’\n  .replace(/[^\\w-]+/g, '') // Remove all non-word characters\n  .replace(/--+/g, '-') // Replace multiple — with single -\n  .replace(/^-+/, ''); // Trim — from start of text .replace(/-+$/, '') // Trim — from end of text\n};\nexport const isValidPhoneNumber = phone => phone.match(phoneRegex);\nexport const isValidEmailAddress = email => email.match(emailRegex);\nexport const nl2br = string => string.split(/\\\\r\\\\n|\\\\n|\\\\r/).map(text => {\n  const i = Math.floor(Math.random() * 101);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [text, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this)]\n  }, `${text}-${i}`, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 7\n  }, this);\n});","map":{"version":3,"sources":["/home/agung/Projects/joki/covid19-diagnosis/src/helpers/string.js"],"names":["React","phoneRegex","emailRegex","slugify","string","a","b","p","RegExp","split","join","toString","trim","toLowerCase","replace","c","charAt","indexOf","isValidPhoneNumber","phone","match","isValidEmailAddress","email","nl2br","map","text","i","Math","floor","random"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAU,GAAG,oDAAnB;AACA,MAAMC,UAAU,GAAG,sJAAnB;AAEA,OAAO,MAAMC,OAAO,GAAGC,MAAM,IAAI;AAC/B,QAAMC,CAAC,GAAG,gDAAV;AACA,QAAMC,CAAC,GAAG,gDAAV;AACA,QAAMC,CAAC,GAAG,IAAIC,MAAJ,CAAWH,CAAC,CAACI,KAAF,CAAQ,EAAR,EAAYC,IAAZ,CAAiB,GAAjB,CAAX,EAAkC,GAAlC,CAAV;AACA,SAAON,MAAM,CACVO,QADI,GAEJC,IAFI,GAGJC,WAHI,GAIJC,OAJI,CAII,MAJJ,EAIY,GAJZ,EAIiB;AAJjB,GAKJA,OALI,CAKIP,CALJ,EAKOQ,CAAC,IAAIT,CAAC,CAACU,MAAF,CAASX,CAAC,CAACY,OAAF,CAAUF,CAAV,CAAT,CALZ,EAKoC;AALpC,GAMJD,OANI,CAMI,IANJ,EAMU,OANV,EAMmB;AANnB,GAOJA,OAPI,CAOI,UAPJ,EAOgB,EAPhB,EAOoB;AAPpB,GAQJA,OARI,CAQI,MARJ,EAQY,GARZ,EAQiB;AARjB,GASJA,OATI,CASI,KATJ,EASW,EATX,CAAP,CAJ+B,CAaR;AACxB,CAdM;AAgBP,OAAO,MAAMI,kBAAkB,GAAGC,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYnB,UAAZ,CAApC;AACP,OAAO,MAAMoB,mBAAmB,GAAGC,KAAK,IAAIA,KAAK,CAACF,KAAN,CAAYlB,UAAZ,CAArC;AACP,OAAO,MAAMqB,KAAK,GAAGnB,MAAM,IACzBA,MAAM,CAACK,KAAP,CAAa,gBAAb,EAA+Be,GAA/B,CAAmCC,IAAI,IAAI;AACzC,QAAMC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAV;AACA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,eACGJ,IADH,eAEE;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,KAAsB,GAAEA,IAAK,IAAGC,CAAE,EAAlC;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CARD,CADK","sourcesContent":["import React from 'react';\n\nconst phoneRegex = /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;\nconst emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nexport const slugify = string => {\n  const a = 'àáäâãåèéëêìíïîòóöôùúüûñçßÿœæŕśńṕẃǵǹḿǘẍźḧ·/_,:;';\n  const b = 'aaaaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh------';\n  const p = new RegExp(a.split('').join('|'), 'g');\n  return string\n    .toString()\n    .trim()\n    .toLowerCase()\n    .replace(/\\s+/g, '-') // Replace spaces with\n    .replace(p, c => b.charAt(a.indexOf(c))) // Replace special characters\n    .replace(/&/g, '-and-') // Replace & with ‘and’\n    .replace(/[^\\w-]+/g, '') // Remove all non-word characters\n    .replace(/--+/g, '-') // Replace multiple — with single -\n    .replace(/^-+/, ''); // Trim — from start of text .replace(/-+$/, '') // Trim — from end of text\n};\n\nexport const isValidPhoneNumber = phone => phone.match(phoneRegex);\nexport const isValidEmailAddress = email => email.match(emailRegex);\nexport const nl2br = string =>\n  string.split(/\\\\r\\\\n|\\\\n|\\\\r/).map(text => {\n    const i = Math.floor(Math.random() * 101);\n    return (\n      <React.Fragment key={`${text}-${i}`}>\n        {text}\n        <br />\n      </React.Fragment>\n    );\n  });\n"]},"metadata":{},"sourceType":"module"}