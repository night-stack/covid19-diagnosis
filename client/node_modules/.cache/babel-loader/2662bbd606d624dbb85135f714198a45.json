{"ast":null,"code":"export const getRandom = () => Math.random();\nexport const getThousandString = (val, fixNumber = 2, prefix = '') => {\n  if (val >= 10000) {\n    return `${prefix}${parseFloat(val / 1000).toFixed(fixNumber)}K`;\n  }\n\n  const numberFormated = new Intl.NumberFormat('id-ID', {\n    maximumFractionDigits: 2\n  }).format(val);\n  return `${prefix}${numberFormated}`;\n};\nexport const getThousandFormat = (val, prefix = '') => {\n  const numberFormated = new Intl.NumberFormat('id-ID', {\n    maximumFractionDigits: 2\n  }).format(val);\n  return `${prefix}${numberFormated}`;\n};","map":{"version":3,"sources":["/home/agung/Projects/joki/covid19-diagnosis/client/src/helpers/number.js"],"names":["getRandom","Math","random","getThousandString","val","fixNumber","prefix","parseFloat","toFixed","numberFormated","Intl","NumberFormat","maximumFractionDigits","format","getThousandFormat"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAG,MAAMC,IAAI,CAACC,MAAL,EAAxB;AAEP,OAAO,MAAMC,iBAAiB,GAAG,CAACC,GAAD,EAAMC,SAAS,GAAG,CAAlB,EAAqBC,MAAM,GAAG,EAA9B,KAAqC;AACpE,MAAIF,GAAG,IAAI,KAAX,EAAkB;AAChB,WAAQ,GAAEE,MAAO,GAAEC,UAAU,CAACH,GAAG,GAAG,IAAP,CAAV,CAAuBI,OAAvB,CAA+BH,SAA/B,CAA0C,GAA7D;AACD;;AAED,QAAMI,cAAc,GAAG,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;AAAEC,IAAAA,qBAAqB,EAAE;AAAzB,GAA/B,EAA6DC,MAA7D,CAAoET,GAApE,CAAvB;AACA,SAAQ,GAAEE,MAAO,GAAEG,cAAe,EAAlC;AACD,CAPM;AASP,OAAO,MAAMK,iBAAiB,GAAG,CAACV,GAAD,EAAME,MAAM,GAAG,EAAf,KAAsB;AACrD,QAAMG,cAAc,GAAG,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;AAAEC,IAAAA,qBAAqB,EAAE;AAAzB,GAA/B,EAA6DC,MAA7D,CAAoET,GAApE,CAAvB;AACA,SAAQ,GAAEE,MAAO,GAAEG,cAAe,EAAlC;AACD,CAHM","sourcesContent":["export const getRandom = () => Math.random();\n\nexport const getThousandString = (val, fixNumber = 2, prefix = '') => {\n  if (val >= 10000) {\n    return `${prefix}${parseFloat(val / 1000).toFixed(fixNumber)}K`;\n  }\n\n  const numberFormated = new Intl.NumberFormat('id-ID', { maximumFractionDigits: 2 }).format(val);\n  return `${prefix}${numberFormated}`;\n};\n\nexport const getThousandFormat = (val, prefix = '') => {\n  const numberFormated = new Intl.NumberFormat('id-ID', { maximumFractionDigits: 2 }).format(val);\n  return `${prefix}${numberFormated}`;\n};\n"]},"metadata":{},"sourceType":"module"}